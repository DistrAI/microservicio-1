version: '3.8'

services:
  # Base de datos PostgreSQL - Configuración de Producción
  postgres-db:
    image: postgres:15-alpine
    container_name: distrIA-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-distriadb_prod}
      POSTGRES_USER: ${POSTGRES_USER:-distriauser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Configuraciones de performance para producción
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - distria-prod-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-distriauser} -d ${POSTGRES_DB:-distriadb_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis para cache (opcional pero recomendado en producción)
  redis-cache:
    image: redis:7-alpine
    container_name: distrIA-redis-prod
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - distria-prod-network
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Aplicación GestorAPI - Configuración de Producción
  gestor-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SPRING_PROFILES_ACTIVE=prod
    image: distraia/gestor-api:${APP_VERSION:-latest}
    container_name: distrIA-gestor-api-prod
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    environment:
      # Profile de Spring
      SPRING_PROFILES_ACTIVE: prod
      
      # Configuración de base de datos
      DATABASE_URL: jdbc:postgresql://postgres-db:5432/${POSTGRES_DB:-distriadb_prod}
      DATABASE_USERNAME: ${POSTGRES_USER:-distriauser}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Configuración de Redis
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Configuración de seguridad JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      
      # Configuración de CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://distraia.com,https://dashboard.distraia.com}
      GRAPHQL_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://distraia.com,https://dashboard.distraia.com}
      
      # Configuración de logging
      LOGGING_FILE_NAME: /app/logs/gestorapi.log
      LOGGING_FILE_MAX_SIZE: 10MB
      LOGGING_FILE_MAX_HISTORY: 30
      
      # Configuración SSL (si se usa)
      SSL_ENABLED: ${SSL_ENABLED:-false}
      SSL_KEY_STORE: ${SSL_KEY_STORE:-}
      SSL_KEY_STORE_PASSWORD: ${SSL_KEY_STORE_PASSWORD:-}
      
      # Configuración de pool de conexiones
      HIKARI_MAXIMUM_POOL_SIZE: 20
      HIKARI_MINIMUM_IDLE: 5
      HIKARI_IDLE_TIMEOUT: 300000
      HIKARI_MAX_LIFETIME: 1200000
      HIKARI_CONNECTION_TIMEOUT: 20000
      
      # Variables de JVM para producción
      JAVA_OPTS: >
        -Xms512m
        -Xmx1g
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=16m
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -XX:+UseCompressedOops
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.profiles.active=prod
    ports:
      - "${APP_PORT:-8080}:8080"
      - "${MANAGEMENT_PORT:-8081}:8081"
    volumes:
      - app_logs_prod:/app/logs
      - app_temp:/tmp
    networks:
      - distria-prod-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx como reverse proxy (recomendado para producción)
  nginx:
    image: nginx:alpine
    container_name: distrIA-nginx-prod
    restart: always
    depends_on:
      - gestor-api
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - distria-prod-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: distrIA-prometheus-prod
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - distria-prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

# Volúmenes persistentes para producción
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  app_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/app
  app_temp:
    driver: local
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/nginx
  prometheus_data:
    driver: local

# Red personalizada para producción
networks:
  distria-prod-network:
    driver: bridge
    name: distria-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
